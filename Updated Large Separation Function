def pyplot(x, y, ind):
    """
    Plots the original data with the peaks that were identified

    Parameters
    ----------
    x : array-like
        Data on the x-axis
    y : array-like
        Data on the y-axis
    ind : array-like
        Indexes of the identified peaks
    """
    plt.plot(x, y, "--")

    marker_x = x.iloc[ind] if hasattr(x, "iloc") else x[ind]
    marker_y = y.iloc[ind] if hasattr(y, "iloc") else y[ind]

    plt.plot(marker_x, marker_y, "r+", ms=5, mew=2, label="{} peaks".format(len(ind)))
    plt.legend()
    
    
    
def indexes(y, thres=0.3, min_dist=1, thres_abs=False):
    """Peak detection routine.

    Finds the numeric index of the peaks in *y* by taking its first order difference. By using
    *thres* and *min_dist* parameters, it is possible to reduce the number of
    detected peaks. *y* must be signed.

    Parameters
    ----------
    y : ndarray (signed)
        1D amplitude data to search for peaks.
    thres : float between [0., 1.]
        Normalized threshold. Only the peaks with amplitude higher than the
        threshold will be detected.
    min_dist : int
        Minimum distance between each detected peak. The peak with the highest
        amplitude is preferred to satisfy this constraint.
    thres_abs: boolean
        If True, the thres value will be interpreted as an absolute value, instead of
        a normalized threshold.

    Returns
    -------
    ndarray
        Array containing the numeric indexes of the peaks that were detected.
        When using with Pandas DataFrames, iloc should be used to access the values at the returned positions.
    """
    if isinstance(y, np.ndarray) and np.issubdtype(y.dtype, np.unsignedinteger):
        raise ValueError("y must be signed")

    if not thres_abs:
        thres = thres * (np.max(y) - np.min(y)) + np.min(y)

    min_dist = int(min_dist)

    # compute first order difference
    dy = np.diff(y)

    # propagate left and right values successively to fill all plateau pixels (0-value)
    zeros, = np.where(dy == 0)

    # check if the signal is totally flat
    if len(zeros) == len(y) - 1:
        return np.array([])

    if len(zeros):
        # compute first order difference of zero indexes
        zeros_diff = np.diff(zeros)
        # check when zeros are not chained together
        zeros_diff_not_one, = np.add(np.where(zeros_diff != 1), 1)
        # make an array of the chained zero indexes
        zero_plateaus = np.split(zeros, zeros_diff_not_one)

        # fix if leftmost value in dy is zero
        if zero_plateaus[0][0] == 0:
            dy[zero_plateaus[0]] = dy[zero_plateaus[0][-1] + 1]
            zero_plateaus.pop(0)

        # fix if rightmost value of dy is zero
        if len(zero_plateaus) and zero_plateaus[-1][-1] == len(dy) - 1:
            dy[zero_plateaus[-1]] = dy[zero_plateaus[-1][0] - 1]
            zero_plateaus.pop(-1)

        # for each chain of zero indexes
        for plateau in zero_plateaus:
            median = np.median(plateau)
            # set leftmost values to leftmost non zero values
            dy[plateau[plateau < median]] = dy[plateau[0] - 1]
            # set rightmost and middle values to rightmost non zero values
            dy[plateau[plateau >= median]] = dy[plateau[-1] + 1]

    # find the peaks by using the first order difference
    peaks = np.where(
        (np.hstack([dy, 0.0]) < 0.0)
        & (np.hstack([0.0, dy]) > 0.0)
        & (np.greater(y, thres))
    )[0]

    # handle multiple peaks, respecting the minimum distance
    if peaks.size > 1 and min_dist > 1:
        highest = peaks[np.argsort(y[peaks])][::-1]
        rem = np.ones(y.size, dtype=bool)
        rem[peaks] = False

        for peak in highest:
            if not rem[peak]:
                sl = slice(max(0, peak - min_dist), peak + min_dist + 1)
                rem[sl] = True
                rem[peak] = False

        peaks = np.arange(y.size)[~rem]

    return peaks
    
    
    
def largesep(rawdata, vmax, width,Starnumber):
    print(f'For Star {Starnumber} with vmax={vmax}')
    frequency=data[0]
    binsize=10
    '''
    calculates the large separation between the most prominant l modes
    
    rawdata: imported data 
    vmax: calculated maximum frequency of the Gaussian envelope
    width: calculated width of the Gaussian envelope
    -------------------------------
    returns array of [int(Starnumber), vmax, mean_no_peaks, mean_no_peaks_std, mean_lspacing, mean_lspacing_std] 
    int(Starnumber): Star Number
    vmax = calculated maximum frequency #for ease of plotting the resukts later
    mean_no_peaks, mean_no_peaks_std: mean number of peaks identified and standard deviation on this
    mean_lspacing, mean_lspacing_std: mean large spacing and the standard deviation on this
    '''
    p_centre = 5000
    halfwidth = width/2  #to be replaced with the calculated width
    D = 0
    Dmax = 25
    
    xny=bin_it(addnoise(rawdata),frequency,binsize)
    xdata = xny[1]
    ydata = xny[0]
    
    
    if vmax == 0 or vmax<3000: #indexing to centre peak finding around the Gaussian envelope
        low = p_centre-halfwidth    #and if vmax<3000 it will default to vmax=p_centre=5000
        high = p_centre+halfwidth
        lowbound = np.where(xdata>3999)[0][0] #need to put in terms of vmax
        highbound = np.argwhere(xdata>5999)[0][0]
    else:
        low = vmax-4*halfwidth   #if vmax is good, it will centre the peak finding function on that vmax
        high = vmax+4*halfwidth
        lowbound = np.argwhere(xdata>(low))[0][0]
        highbound = np.argwhere(xdata>(high))[0][0]
    
    #generating low binned data
    binned_p, binned_x = bin_it(ydata[lowbound:highbound], xdata[lowbound:highbound],binsize) 
    best_thresh = []
    no_peaks = []
    
    #finding the best no. peaks to match to by looping over different noisy data sets 
    while D<Dmax:    #and finding the average number of peaks it detects
        xny=bin_it(addnoise(rawdata),frequency,binsize)
        binned_p, binned_x = bin_it(xny[0][lowbound:highbound], xny[1][lowbound:highbound],binsize)
        nos_peaks = len(indexes(binned_p, thres=0.375, min_dist=50))
        no_peaks = np.append(no_peaks, [nos_peaks])
        D=D+1
    mean_no_peaks = np.mean(no_peaks)
    mean_no_peaks_std = np.std(no_peaks)
    print(f' The mean number of peaks is {np.round(mean_no_peaks,decimals=0)} ± {np.round(mean_no_peaks_std,decimals=0)}') 
    #if mean number of peaks is too low or too high, something is wrong, roughly between 10-20 from testing
    
    #finding the best threshold value
    for i in np.linspace(0.25,0.5,70): 
        xny=bin_it(addnoise(rawdata),frequency,binsize)
        binned_p, binned_x = bin_it(xny[0][lowbound:highbound], xny[1][lowbound:highbound],binsize)
        indexess = indexes(binned_p, thres=i, min_dist=50)
        if len(indexess) == np.round((np.mean(no_peaks)),decimals=0): #selecting all thresholds that produce
            best_thresh = np.append(best_thresh,i)       #the same number of peaks as the average number 'no_peaks'
    
    thresh = np.mean(best_thresh)
    
    if thresh < 0.355: #if thresh too low, setting min thresh to 0.355 so not too many peaks are chosen
        thresh = 0.355
    else:
        thresh = np.mean(best_thresh)
        
    print(f' The mean threshold is {np.round(thresh,decimals=3)} ± {np.round(np.std(best_thresh),decimals=3)}')
    
    indexes2 = indexes(binned_p, thres=thresh, min_dist=50) #finds peaks with best_thresh
    freq_array = np.array(binned_x[indexes2])
    max_p = np.amax(binned_p[indexes2])*(1-thresh)
    plt.figure(figsize = (15, 7))
    pyplot(binned_x, binned_p, indexes2) #plots the peaks on a separate graph
    plt.xlabel('Frequency ($\mu$Hz)')
    plt.ylabel('$Ppm^2$/$\mu$Hz')
    plt.axhline(max_p,color='r') #adding line at cut-off based on the threshold
    plt.show()
    
    
    n=0
    large_sep = []
    spacing = []
    
    #calculating the large separation
    for i in freq_array:
        nmax=len(freq_array)
        while n<nmax-1:
            z = abs(freq_array[n]-freq_array[n+1])
            if z<100:
                spacing = np.append(spacing, [z])
            n=n+1
            spacing = (np.array(spacing))
    mean_lspacing = 2*np.mean(spacing)
    mean_lspacing_std = np.std(spacing)
    print(f'The mean large spacing for Star {Starnumber} is {np.round(mean_lspacing,decimals=2)} ± {np.round(mean_lspacing_std,decimals=2)}')
    print('')
    return np.array([ int(Starnumber), vmax, mean_no_peaks, mean_no_peaks_std, mean_lspacing, mean_lspacing_std])
    
    
