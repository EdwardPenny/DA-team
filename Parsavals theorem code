When copying this code dont take the top bit if you are using spyder 

When converting from a time domain to a time domain to a frequency domain it is vital that energy has to be conserved. Parsavals theorem states that the mean square power of in the time domain and the power in the frequency domain should be equal. lightcurve does not conserve Parsavals theorem. To make the energy equal in both cases we will adjust the power values in the frequency domain by a set factor which will be calculated below.

First we will need to calculate both the mean square power in the time domain and the power in the frequency domain to check if they are equal

$$mean\,square\,power\,time\,domain\,=\frac{1}{N}\sum_i^Ny_i^2 (1)$$

$$power\,frequency\,domain\,=\frac{2\sigma^2T}{N} (2)$$

$$\sigma^2=\frac{1}{N}\sum_i^Ny_i^2 (3)$$

y in equation 1 refers to the normalised flux in the time domain and y in equation 2 refers to the power in the frerquency domain.
Lightcurve does not obey Parsavals theorem. We need to calculate the factor by which we will scale the power values in the frequency domain. A is the adjustment factor.

$$mean\,square\,power\,time\,domain\,=P_t$$

$P_t$ should be equal to the power in the frequency domain. We will set $P_t$ equal to equation 2

$$P_t=\frac{2\sigma^2T}{N}\,\,\,\,where\,\,\sigma^2=\frac{1}{N}\sum_i^N(Ay_i)^2$$

$$\frac{NP_t}{2T}=sigma^2=\frac{1}{N}\sum_i^N(Ay_i)^2=\frac{A^2}{N}\sum_i^N(y_i)^2$$

$$A=\sqrt{\frac{P_tN^2}{2T\sum_i^Ny_i^2}}$$

$$A=\sqrt{\frac{P_tN}{2T\sigma^2}}$$

import numpy as np
import lightkurve as lk
import matplotlib.pyplot as plt
from matplotlib.pyplot import *

def sigma2(a):
    '''Calculates the sigma squared of an array'''
    N=len(a)
    a=np.square(a)
    a=np.nansum(a) #nansum sums the array but skips values which are nan
    return a/N
    
    def power(a,T):
    ''' calculates the power in the frequency domain'''
    N=len(a)
    return 2*sigma2(a)*T/N
    
    search = lk.search_lightcurvefile('KIC3427720', cadence = 'short', mission = 'kepler') 

#print(search) # displays the result of the search

# DOWNLOAD ALL DATA - since will treat as one long lightcurve
Lightcurves = search.download_all()
Lightcurves = Lightcurves.PDCSAP_FLUX #pre-reduced data BUT is not always good... SAP = Simple Aperture Photometry
Lightcurves = Lightcurves.stitch() #stitches all the lightcurves together to create one long lightcurve
Pbefore= sigma2(Lightcurves.flux) #calcualtes the mean square power in the time domain 
#Lightcurves.flux extracts the data of the flux values from Lightcurves
print(f'mean square power in time domain {Pbefore}')
#Lightcurves.plot()

Lightcurve_Trimmed = Lightcurves.remove_nans().flatten(201).remove_outliers(4)
#.remove_nans() --> removes not a number values  
#.flatten() -->  number in bracket is the number of timestamps it will attempt to flatten to, must be odd
#.remove_outliers --> removes outliers up to X sigma - ie will remove the large dropouts
#Lightcurve_Trimmed.plot()

# MAKING THE POWER SPECTRUM (aka a periodogram)
pg = Lightcurve_Trimmed.to_periodogram(normalization = 'psd')
total_time = Lightcurves.time[-1]-Lightcurves.time[0] 
#.time extracts the time data from  Lightcurves total_time is the time over which the observations were made
f,p = pg.frequency.value, pg.power.value
Pafter = power(p,total_time) # calculates the power in the frequency domain

print(f'power in frequency domain {Pafter}')

# PLOTTING SERIES
#figure(figsize = (15,10))
#plot(f, p)
#xlim()
#ylim()
#plt.show()

#The adjustment factor will be multipled by the power values in the frequency domain. It will ensure energy conservation between the
#frequency and time domains.
Adjustment_factor=((Pbefore*len(p))/(2*total_time*sigma2(p)))**0.5 

Ap=Adjustment_factor*p #changing the power vaules in the frequency domain by the adjustment factor
AdjustedP=power(Ap,total_time)
print(f'the new power in the frequency domain is {AdjustedP}')
factor_off=Pbefore/AdjustedP
print(f'factor off {factor_off}')
plot(f,Ap)
plt.show()
